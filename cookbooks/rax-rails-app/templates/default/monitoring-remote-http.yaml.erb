# CHEF MANAGED FILE: DO NOT EDIT
# Controlling Cookbook: <%= @cookbook_name %>
#

type: remote.http
label: Remote HTTP check on <%= "#{node['cloud']['public_ipv4']} port #{@apache_port} for #{@server_name}" %>
disabled: <%= node['railsstack']['cloud_monitoring']['remote_http']['disabled'] %>
period: <%= node['railsstack']['cloud_monitoring']['remote_http']['period'] %>
timeout: <%= node['railsstack']['cloud_monitoring']['remote_http']['timeout'] %>
target_hostname: <%= node['cloud']['public_ipv4'] %>
monitoring_zones_poll:
  - mzdfw
  - mzord
  - mziad
details:
  hostname: <%= @server_name %>
  method: GET
  body: MySQL Service OK
  url: http://<%= "#{node['cloud']['public_ipv4']}:#{@apache_port}" %>
<% if node['railsstack']['cloud_monitoring']['remote_http']['alarm'] == true %>
alarms:
  http-check:
    label: Remote HTTP check on <%= "#{node['cloud']['public_ipv4']} port #{@apache_port} for #{@server_name}" %>
    notification_plan_id: npTechnicalContactsEmail
    criteria: |
      if (metric['code'] regex '4[0-9][0-9]') {
        return new AlarmStatus(CRITICAL, 'HTTP server responding with 4xx status');
      }
      if (metric['code'] regex '5[0-9][0-9]') {
        return new AlarmStatus(CRITICAL, 'HTTP server responding with 5xx status');
      }
      return new AlarmStatus(OK, 'HTTP server is functioning normally');
<% end %>