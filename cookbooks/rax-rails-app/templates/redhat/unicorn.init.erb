#!/bin/sh
#
# <%= @service_name %> Unicorn server for <%= @node['railsstack']['app_name'] %>
#
# chkconfig:   2345 20 80
# description: controls a unicorn application server for the ruby app \
#              <%= @node['railsstack']['app_name'] %>

### BEGIN INIT INFO
# Provides:          <%= @service_name %>
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the unicorn web server
# Description:       starts unicorn
### END INIT INFO

export BUNDLE_GEMFILE="<%= @bundle_gemfile %>"

SHELL=/bin/bash
DAEMON="<%= @bundle %>"
DAEMON_OPTS="exec unicorn -D -E <%= @environment %> -c <%= @config %>"
<% if node['railsstack']['rails']['secret_key_base'] -%>
export SECRET_KEY_BASE=<%= node['railsstack']['rails']['secret_key_base'] %>
<% end -%>

<% if @wrapper %>
WRAPPER="<%= @wrapper %>"
WRAPPER_OPTS="<%= @wrapper_opts %>"
COMMAND="$WRAPPER -- $WRAPPER_OPTS $DAEMON $DAEMON_OPTS"
<% else %>
COMMAND="$DAEMON -- $DAEMON_OPTS"
<% end -%>

PIDFILE="<%= @pidfile %>"
USER="<%= @user %>"
LANG="<%= @locale %>"
LC_ALL="<%= @locale %>"
LANGUAGE="<%= @locale %>"

NAME=<%= @service_name %>
DESC=<%= @service_name %>

# Source function library.
. /etc/rc.d/init.d/functions

exec="<%= @bundle %>"
prog="<%= @service_name %>"
config="<%= @config %>"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    daemon --pidfile="$PIDFILE" $COMMAND
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $PIDFILE $prog SIGINT
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $PIDFILE $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
